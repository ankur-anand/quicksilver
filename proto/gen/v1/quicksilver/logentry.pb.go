// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.6
// source: v1/quicksilver/logentry.proto

package quicksilver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionLogs_Operation int32

const (
	// Heartbeat Log Entries should not be saved.
	TransactionLogs_HEARTBEAT TransactionLogs_Operation = 0
	TransactionLogs_SET       TransactionLogs_Operation = 1
	TransactionLogs_DELETE    TransactionLogs_Operation = 2
)

// Enum value maps for TransactionLogs_Operation.
var (
	TransactionLogs_Operation_name = map[int32]string{
		0: "HEARTBEAT",
		1: "SET",
		2: "DELETE",
	}
	TransactionLogs_Operation_value = map[string]int32{
		"HEARTBEAT": 0,
		"SET":       1,
		"DELETE":    2,
	}
)

func (x TransactionLogs_Operation) Enum() *TransactionLogs_Operation {
	p := new(TransactionLogs_Operation)
	*p = x
	return p
}

func (x TransactionLogs_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionLogs_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_quicksilver_logentry_proto_enumTypes[0].Descriptor()
}

func (TransactionLogs_Operation) Type() protoreflect.EnumType {
	return &file_v1_quicksilver_logentry_proto_enumTypes[0]
}

func (x TransactionLogs_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionLogs_Operation.Descriptor instead.
func (TransactionLogs_Operation) EnumDescriptor() ([]byte, []int) {
	return file_v1_quicksilver_logentry_proto_rawDescGZIP(), []int{0, 0}
}

// TransactionLogs is the persistent log entries in the database.
type TransactionLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_number is monotonically increasing sequence number.
	// It is incremented for each request with SET or DEL operation.
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// last_sequence_number stores the last seen sequence number in order.
	// this helps in detecting the hole in the replicated log.
	LastSequenceNumber uint64 `protobuf:"varint,2,opt,name=last_sequence_number,json=lastSequenceNumber,proto3" json:"last_sequence_number,omitempty"`
	// Action to take for this log entry
	Action TransactionLogs_Operation `protobuf:"varint,3,opt,name=action,proto3,enum=v1.quicksilver.TransactionLogs_Operation" json:"action,omitempty"`
	// Name of the database where this configuration Object Belongs.
	// This is logical namespace for different configuration kind.
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	// This is the config object.
	Kv *KVObject `protobuf:"bytes,5,opt,name=kv,proto3" json:"kv,omitempty"`
	// CheckSum is XXHash64 from http://cyan4973.github.io/xxHash/
	// This should encode all of the information.
	// 1. Operation
	// 2. sequence_number
	// 3. unix_timestamp
	// 4. database name
	// 5. KVObject
	XxHash64_Checksum uint64 `protobuf:"varint,6,opt,name=xxHash64_Checksum,json=xxHash64Checksum,proto3" json:"xxHash64_Checksum,omitempty"`
	// incremental_hash validates if any logs are lost or incorrectly ordered in history.
	LastId uint64 `protobuf:"varint,7,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	// unix_timestamp store the log first entry timestamp into int64.
	// It's the physical time, useful for log cleanup as well.
	// this is useful for calculation the overall replication delay in the system.
	// note this doesn't take clock skew and clock drift into account.
	UnixTimestamp int64 `protobuf:"varint,8,opt,name=unix_timestamp,json=unixTimestamp,proto3" json:"unix_timestamp,omitempty"`
	// applied_to_db indicates if log has been
	AppliedToDb bool   `protobuf:"varint,9,opt,name=applied_to_db,json=appliedToDb,proto3" json:"applied_to_db,omitempty"`
	Trace       *Trace `protobuf:"bytes,10,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (x *TransactionLogs) Reset() {
	*x = TransactionLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_quicksilver_logentry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionLogs) ProtoMessage() {}

func (x *TransactionLogs) ProtoReflect() protoreflect.Message {
	mi := &file_v1_quicksilver_logentry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionLogs.ProtoReflect.Descriptor instead.
func (*TransactionLogs) Descriptor() ([]byte, []int) {
	return file_v1_quicksilver_logentry_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionLogs) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TransactionLogs) GetLastSequenceNumber() uint64 {
	if x != nil {
		return x.LastSequenceNumber
	}
	return 0
}

func (x *TransactionLogs) GetAction() TransactionLogs_Operation {
	if x != nil {
		return x.Action
	}
	return TransactionLogs_HEARTBEAT
}

func (x *TransactionLogs) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *TransactionLogs) GetKv() *KVObject {
	if x != nil {
		return x.Kv
	}
	return nil
}

func (x *TransactionLogs) GetXxHash64_Checksum() uint64 {
	if x != nil {
		return x.XxHash64_Checksum
	}
	return 0
}

func (x *TransactionLogs) GetLastId() uint64 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *TransactionLogs) GetUnixTimestamp() int64 {
	if x != nil {
		return x.UnixTimestamp
	}
	return 0
}

func (x *TransactionLogs) GetAppliedToDb() bool {
	if x != nil {
		return x.AppliedToDb
	}
	return false
}

func (x *TransactionLogs) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type KVObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XxHash64 uint64 `protobuf:"varint,3,opt,name=xxHash64,proto3" json:"xxHash64,omitempty"` // key-value level CRC
	// z_compressed denotes if the value has been zst compressed
	ZCompressed bool `protobuf:"varint,4,opt,name=z_compressed,json=zCompressed,proto3" json:"z_compressed,omitempty"`
}

func (x *KVObject) Reset() {
	*x = KVObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_quicksilver_logentry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVObject) ProtoMessage() {}

func (x *KVObject) ProtoReflect() protoreflect.Message {
	mi := &file_v1_quicksilver_logentry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVObject.ProtoReflect.Descriptor instead.
func (*KVObject) Descriptor() ([]byte, []int) {
	return file_v1_quicksilver_logentry_proto_rawDescGZIP(), []int{1}
}

func (x *KVObject) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVObject) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KVObject) GetXxHash64() uint64 {
	if x != nil {
		return x.XxHash64
	}
	return 0
}

func (x *KVObject) GetZCompressed() bool {
	if x != nil {
		return x.ZCompressed
	}
	return false
}

// Trace provides additional context, to enable parent/child relationships
//
// Traces are propagated in the B3 HTTP Multiple Headers Format.
// https://github.com/openzipkin/b3-propagation
// B3 propagated to support non sampled debug propagation
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// x_request_id enables logging across the invoked services to be correlated.
	XRequestId string `protobuf:"bytes,1,opt,name=x_request_id,json=xRequestId,proto3" json:"x_request_id,omitempty"`
	// b3 propagator.
	// x-b3-traceid: {TraceId}
	XB3TraceId string `protobuf:"bytes,2,opt,name=x_b3_trace_id,json=xB3TraceId,proto3" json:"x_b3_trace_id,omitempty"`
	// x-b3-spanid: {SpanId}
	XB3SpanId string `protobuf:"bytes,3,opt,name=x_b3_span_id,json=xB3SpanId,proto3" json:"x_b3_span_id,omitempty"`
	// x-b3-parentspanid: {ParentSpanId}
	XB3ParentSpanId string `protobuf:"bytes,4,opt,name=x_b3_parent_span_id,json=xB3ParentSpanId,proto3" json:"x_b3_parent_span_id,omitempty"`
	// x-b3-sampled: {SamplingState}
	XB3Sampled string `protobuf:"bytes,5,opt,name=x_b3_sampled,json=xB3Sampled,proto3" json:"x_b3_sampled,omitempty"`
	// x-b3-flags: {DebugFlag}
	XB3Flags string `protobuf:"bytes,6,opt,name=x_b3_flags,json=xB3Flags,proto3" json:"x_b3_flags,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_quicksilver_logentry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_v1_quicksilver_logentry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_v1_quicksilver_logentry_proto_rawDescGZIP(), []int{2}
}

func (x *Trace) GetXRequestId() string {
	if x != nil {
		return x.XRequestId
	}
	return ""
}

func (x *Trace) GetXB3TraceId() string {
	if x != nil {
		return x.XB3TraceId
	}
	return ""
}

func (x *Trace) GetXB3SpanId() string {
	if x != nil {
		return x.XB3SpanId
	}
	return ""
}

func (x *Trace) GetXB3ParentSpanId() string {
	if x != nil {
		return x.XB3ParentSpanId
	}
	return ""
}

func (x *Trace) GetXB3Sampled() string {
	if x != nil {
		return x.XB3Sampled
	}
	return ""
}

func (x *Trace) GetXB3Flags() string {
	if x != nil {
		return x.XB3Flags
	}
	return ""
}

var File_v1_quicksilver_logentry_proto protoreflect.FileDescriptor

var file_v1_quicksilver_logentry_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72,
	0x2f, 0x6c, 0x6f, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x22,
	0xe4, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x02, 0x6b, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x02, 0x6b, 0x76, 0x12, 0x2b, 0x0a, 0x11, 0x78, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x36, 0x34, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x78, 0x78, 0x48, 0x61, 0x73, 0x68, 0x36, 0x34, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x62, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0x71, 0x0a, 0x08, 0x4b, 0x56, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x78, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x7a, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x7a, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x78, 0x5f, 0x62, 0x33, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x42,
	0x33, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x78, 0x5f, 0x62, 0x33,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x78, 0x42, 0x33, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x13, 0x78, 0x5f, 0x62,
	0x33, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x78, 0x42, 0x33, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x78, 0x5f, 0x62, 0x33, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78,
	0x42, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x78, 0x5f, 0x62,
	0x33, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x78,
	0x42, 0x33, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6b, 0x75, 0x72, 0x2d, 0x61, 0x6e, 0x61, 0x6e,
	0x64, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_quicksilver_logentry_proto_rawDescOnce sync.Once
	file_v1_quicksilver_logentry_proto_rawDescData = file_v1_quicksilver_logentry_proto_rawDesc
)

func file_v1_quicksilver_logentry_proto_rawDescGZIP() []byte {
	file_v1_quicksilver_logentry_proto_rawDescOnce.Do(func() {
		file_v1_quicksilver_logentry_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_quicksilver_logentry_proto_rawDescData)
	})
	return file_v1_quicksilver_logentry_proto_rawDescData
}

var file_v1_quicksilver_logentry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_quicksilver_logentry_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_v1_quicksilver_logentry_proto_goTypes = []interface{}{
	(TransactionLogs_Operation)(0), // 0: v1.quicksilver.TransactionLogs.Operation
	(*TransactionLogs)(nil),        // 1: v1.quicksilver.TransactionLogs
	(*KVObject)(nil),               // 2: v1.quicksilver.KVObject
	(*Trace)(nil),                  // 3: v1.quicksilver.Trace
}
var file_v1_quicksilver_logentry_proto_depIdxs = []int32{
	0, // 0: v1.quicksilver.TransactionLogs.action:type_name -> v1.quicksilver.TransactionLogs.Operation
	2, // 1: v1.quicksilver.TransactionLogs.kv:type_name -> v1.quicksilver.KVObject
	3, // 2: v1.quicksilver.TransactionLogs.trace:type_name -> v1.quicksilver.Trace
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_v1_quicksilver_logentry_proto_init() }
func file_v1_quicksilver_logentry_proto_init() {
	if File_v1_quicksilver_logentry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_quicksilver_logentry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_quicksilver_logentry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_quicksilver_logentry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_quicksilver_logentry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_quicksilver_logentry_proto_goTypes,
		DependencyIndexes: file_v1_quicksilver_logentry_proto_depIdxs,
		EnumInfos:         file_v1_quicksilver_logentry_proto_enumTypes,
		MessageInfos:      file_v1_quicksilver_logentry_proto_msgTypes,
	}.Build()
	File_v1_quicksilver_logentry_proto = out.File
	file_v1_quicksilver_logentry_proto_rawDesc = nil
	file_v1_quicksilver_logentry_proto_goTypes = nil
	file_v1_quicksilver_logentry_proto_depIdxs = nil
}
